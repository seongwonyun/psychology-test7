
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `results` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model results
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type resultsModel = runtime.Types.Result.DefaultSelection<Prisma.$resultsPayload>

export type AggregateResults = {
  _count: ResultsCountAggregateOutputType | null
  _avg: ResultsAvgAggregateOutputType | null
  _sum: ResultsSumAggregateOutputType | null
  _min: ResultsMinAggregateOutputType | null
  _max: ResultsMaxAggregateOutputType | null
}

export type ResultsAvgAggregateOutputType = {
  id: number | null
}

export type ResultsSumAggregateOutputType = {
  id: number | null
}

export type ResultsMinAggregateOutputType = {
  id: number | null
  created_at: Date | null
  updated_at: Date | null
  code: string | null
  nickname: string | null
  comment: string | null
}

export type ResultsMaxAggregateOutputType = {
  id: number | null
  created_at: Date | null
  updated_at: Date | null
  code: string | null
  nickname: string | null
  comment: string | null
}

export type ResultsCountAggregateOutputType = {
  id: number
  created_at: number
  updated_at: number
  answers: number
  code: number
  nickname: number
  comment: number
  _all: number
}


export type ResultsAvgAggregateInputType = {
  id?: true
}

export type ResultsSumAggregateInputType = {
  id?: true
}

export type ResultsMinAggregateInputType = {
  id?: true
  created_at?: true
  updated_at?: true
  code?: true
  nickname?: true
  comment?: true
}

export type ResultsMaxAggregateInputType = {
  id?: true
  created_at?: true
  updated_at?: true
  code?: true
  nickname?: true
  comment?: true
}

export type ResultsCountAggregateInputType = {
  id?: true
  created_at?: true
  updated_at?: true
  answers?: true
  code?: true
  nickname?: true
  comment?: true
  _all?: true
}

export type ResultsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which results to aggregate.
   */
  where?: Prisma.resultsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of results to fetch.
   */
  orderBy?: Prisma.resultsOrderByWithRelationInput | Prisma.resultsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.resultsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` results from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` results.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned results
  **/
  _count?: true | ResultsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ResultsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ResultsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ResultsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ResultsMaxAggregateInputType
}

export type GetResultsAggregateType<T extends ResultsAggregateArgs> = {
      [P in keyof T & keyof AggregateResults]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateResults[P]>
    : Prisma.GetScalarType<T[P], AggregateResults[P]>
}




export type resultsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.resultsWhereInput
  orderBy?: Prisma.resultsOrderByWithAggregationInput | Prisma.resultsOrderByWithAggregationInput[]
  by: Prisma.ResultsScalarFieldEnum[] | Prisma.ResultsScalarFieldEnum
  having?: Prisma.resultsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ResultsCountAggregateInputType | true
  _avg?: ResultsAvgAggregateInputType
  _sum?: ResultsSumAggregateInputType
  _min?: ResultsMinAggregateInputType
  _max?: ResultsMaxAggregateInputType
}

export type ResultsGroupByOutputType = {
  id: number
  created_at: Date
  updated_at: Date
  answers: runtime.JsonValue
  code: string | null
  nickname: string | null
  comment: string | null
  _count: ResultsCountAggregateOutputType | null
  _avg: ResultsAvgAggregateOutputType | null
  _sum: ResultsSumAggregateOutputType | null
  _min: ResultsMinAggregateOutputType | null
  _max: ResultsMaxAggregateOutputType | null
}

type GetResultsGroupByPayload<T extends resultsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ResultsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ResultsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ResultsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ResultsGroupByOutputType[P]>
      }
    >
  >



export type resultsWhereInput = {
  AND?: Prisma.resultsWhereInput | Prisma.resultsWhereInput[]
  OR?: Prisma.resultsWhereInput[]
  NOT?: Prisma.resultsWhereInput | Prisma.resultsWhereInput[]
  id?: Prisma.IntFilter<"results"> | number
  created_at?: Prisma.DateTimeFilter<"results"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"results"> | Date | string
  answers?: Prisma.JsonFilter<"results">
  code?: Prisma.StringNullableFilter<"results"> | string | null
  nickname?: Prisma.StringNullableFilter<"results"> | string | null
  comment?: Prisma.StringNullableFilter<"results"> | string | null
}

export type resultsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  answers?: Prisma.SortOrder
  code?: Prisma.SortOrderInput | Prisma.SortOrder
  nickname?: Prisma.SortOrderInput | Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type resultsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.resultsWhereInput | Prisma.resultsWhereInput[]
  OR?: Prisma.resultsWhereInput[]
  NOT?: Prisma.resultsWhereInput | Prisma.resultsWhereInput[]
  created_at?: Prisma.DateTimeFilter<"results"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"results"> | Date | string
  answers?: Prisma.JsonFilter<"results">
  code?: Prisma.StringNullableFilter<"results"> | string | null
  nickname?: Prisma.StringNullableFilter<"results"> | string | null
  comment?: Prisma.StringNullableFilter<"results"> | string | null
}, "id" | "id">

export type resultsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  answers?: Prisma.SortOrder
  code?: Prisma.SortOrderInput | Prisma.SortOrder
  nickname?: Prisma.SortOrderInput | Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.resultsCountOrderByAggregateInput
  _avg?: Prisma.resultsAvgOrderByAggregateInput
  _max?: Prisma.resultsMaxOrderByAggregateInput
  _min?: Prisma.resultsMinOrderByAggregateInput
  _sum?: Prisma.resultsSumOrderByAggregateInput
}

export type resultsScalarWhereWithAggregatesInput = {
  AND?: Prisma.resultsScalarWhereWithAggregatesInput | Prisma.resultsScalarWhereWithAggregatesInput[]
  OR?: Prisma.resultsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.resultsScalarWhereWithAggregatesInput | Prisma.resultsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"results"> | number
  created_at?: Prisma.DateTimeWithAggregatesFilter<"results"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"results"> | Date | string
  answers?: Prisma.JsonWithAggregatesFilter<"results">
  code?: Prisma.StringNullableWithAggregatesFilter<"results"> | string | null
  nickname?: Prisma.StringNullableWithAggregatesFilter<"results"> | string | null
  comment?: Prisma.StringNullableWithAggregatesFilter<"results"> | string | null
}

export type resultsCreateInput = {
  created_at: Date | string
  updated_at: Date | string
  answers: Prisma.JsonNullValueInput | runtime.InputJsonValue
  code?: string | null
  nickname?: string | null
  comment?: string | null
}

export type resultsUncheckedCreateInput = {
  id?: number
  created_at: Date | string
  updated_at: Date | string
  answers: Prisma.JsonNullValueInput | runtime.InputJsonValue
  code?: string | null
  nickname?: string | null
  comment?: string | null
}

export type resultsUpdateInput = {
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  answers?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type resultsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  answers?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type resultsCreateManyInput = {
  id?: number
  created_at: Date | string
  updated_at: Date | string
  answers: Prisma.JsonNullValueInput | runtime.InputJsonValue
  code?: string | null
  nickname?: string | null
  comment?: string | null
}

export type resultsUpdateManyMutationInput = {
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  answers?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type resultsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  answers?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type resultsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  answers?: Prisma.SortOrder
  code?: Prisma.SortOrder
  nickname?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type resultsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type resultsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  code?: Prisma.SortOrder
  nickname?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type resultsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  code?: Prisma.SortOrder
  nickname?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type resultsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type resultsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  updated_at?: boolean
  answers?: boolean
  code?: boolean
  nickname?: boolean
  comment?: boolean
}, ExtArgs["result"]["results"]>

export type resultsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  updated_at?: boolean
  answers?: boolean
  code?: boolean
  nickname?: boolean
  comment?: boolean
}, ExtArgs["result"]["results"]>

export type resultsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  updated_at?: boolean
  answers?: boolean
  code?: boolean
  nickname?: boolean
  comment?: boolean
}, ExtArgs["result"]["results"]>

export type resultsSelectScalar = {
  id?: boolean
  created_at?: boolean
  updated_at?: boolean
  answers?: boolean
  code?: boolean
  nickname?: boolean
  comment?: boolean
}

export type resultsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "created_at" | "updated_at" | "answers" | "code" | "nickname" | "comment", ExtArgs["result"]["results"]>

export type $resultsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "results"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    created_at: Date
    updated_at: Date
    answers: runtime.JsonValue
    code: string | null
    nickname: string | null
    comment: string | null
  }, ExtArgs["result"]["results"]>
  composites: {}
}

export type resultsGetPayload<S extends boolean | null | undefined | resultsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$resultsPayload, S>

export type resultsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<resultsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ResultsCountAggregateInputType | true
  }

export interface resultsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['results'], meta: { name: 'results' } }
  /**
   * Find zero or one Results that matches the filter.
   * @param {resultsFindUniqueArgs} args - Arguments to find a Results
   * @example
   * // Get one Results
   * const results = await prisma.results.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends resultsFindUniqueArgs>(args: Prisma.SelectSubset<T, resultsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__resultsClient<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Results that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {resultsFindUniqueOrThrowArgs} args - Arguments to find a Results
   * @example
   * // Get one Results
   * const results = await prisma.results.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends resultsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, resultsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__resultsClient<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Results that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {resultsFindFirstArgs} args - Arguments to find a Results
   * @example
   * // Get one Results
   * const results = await prisma.results.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends resultsFindFirstArgs>(args?: Prisma.SelectSubset<T, resultsFindFirstArgs<ExtArgs>>): Prisma.Prisma__resultsClient<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Results that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {resultsFindFirstOrThrowArgs} args - Arguments to find a Results
   * @example
   * // Get one Results
   * const results = await prisma.results.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends resultsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, resultsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__resultsClient<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Results that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {resultsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Results
   * const results = await prisma.results.findMany()
   * 
   * // Get first 10 Results
   * const results = await prisma.results.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const resultsWithIdOnly = await prisma.results.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends resultsFindManyArgs>(args?: Prisma.SelectSubset<T, resultsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Results.
   * @param {resultsCreateArgs} args - Arguments to create a Results.
   * @example
   * // Create one Results
   * const Results = await prisma.results.create({
   *   data: {
   *     // ... data to create a Results
   *   }
   * })
   * 
   */
  create<T extends resultsCreateArgs>(args: Prisma.SelectSubset<T, resultsCreateArgs<ExtArgs>>): Prisma.Prisma__resultsClient<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Results.
   * @param {resultsCreateManyArgs} args - Arguments to create many Results.
   * @example
   * // Create many Results
   * const results = await prisma.results.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends resultsCreateManyArgs>(args?: Prisma.SelectSubset<T, resultsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Results and returns the data saved in the database.
   * @param {resultsCreateManyAndReturnArgs} args - Arguments to create many Results.
   * @example
   * // Create many Results
   * const results = await prisma.results.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Results and only return the `id`
   * const resultsWithIdOnly = await prisma.results.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends resultsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, resultsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Results.
   * @param {resultsDeleteArgs} args - Arguments to delete one Results.
   * @example
   * // Delete one Results
   * const Results = await prisma.results.delete({
   *   where: {
   *     // ... filter to delete one Results
   *   }
   * })
   * 
   */
  delete<T extends resultsDeleteArgs>(args: Prisma.SelectSubset<T, resultsDeleteArgs<ExtArgs>>): Prisma.Prisma__resultsClient<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Results.
   * @param {resultsUpdateArgs} args - Arguments to update one Results.
   * @example
   * // Update one Results
   * const results = await prisma.results.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends resultsUpdateArgs>(args: Prisma.SelectSubset<T, resultsUpdateArgs<ExtArgs>>): Prisma.Prisma__resultsClient<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Results.
   * @param {resultsDeleteManyArgs} args - Arguments to filter Results to delete.
   * @example
   * // Delete a few Results
   * const { count } = await prisma.results.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends resultsDeleteManyArgs>(args?: Prisma.SelectSubset<T, resultsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Results.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {resultsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Results
   * const results = await prisma.results.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends resultsUpdateManyArgs>(args: Prisma.SelectSubset<T, resultsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Results and returns the data updated in the database.
   * @param {resultsUpdateManyAndReturnArgs} args - Arguments to update many Results.
   * @example
   * // Update many Results
   * const results = await prisma.results.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Results and only return the `id`
   * const resultsWithIdOnly = await prisma.results.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends resultsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, resultsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Results.
   * @param {resultsUpsertArgs} args - Arguments to update or create a Results.
   * @example
   * // Update or create a Results
   * const results = await prisma.results.upsert({
   *   create: {
   *     // ... data to create a Results
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Results we want to update
   *   }
   * })
   */
  upsert<T extends resultsUpsertArgs>(args: Prisma.SelectSubset<T, resultsUpsertArgs<ExtArgs>>): Prisma.Prisma__resultsClient<runtime.Types.Result.GetResult<Prisma.$resultsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Results.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {resultsCountArgs} args - Arguments to filter Results to count.
   * @example
   * // Count the number of Results
   * const count = await prisma.results.count({
   *   where: {
   *     // ... the filter for the Results we want to count
   *   }
   * })
  **/
  count<T extends resultsCountArgs>(
    args?: Prisma.Subset<T, resultsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ResultsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Results.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResultsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ResultsAggregateArgs>(args: Prisma.Subset<T, ResultsAggregateArgs>): Prisma.PrismaPromise<GetResultsAggregateType<T>>

  /**
   * Group by Results.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {resultsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends resultsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: resultsGroupByArgs['orderBy'] }
      : { orderBy?: resultsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, resultsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the results model
 */
readonly fields: resultsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for results.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__resultsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the results model
 */
export interface resultsFieldRefs {
  readonly id: Prisma.FieldRef<"results", 'Int'>
  readonly created_at: Prisma.FieldRef<"results", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"results", 'DateTime'>
  readonly answers: Prisma.FieldRef<"results", 'Json'>
  readonly code: Prisma.FieldRef<"results", 'String'>
  readonly nickname: Prisma.FieldRef<"results", 'String'>
  readonly comment: Prisma.FieldRef<"results", 'String'>
}
    

// Custom InputTypes
/**
 * results findUnique
 */
export type resultsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * Filter, which results to fetch.
   */
  where: Prisma.resultsWhereUniqueInput
}

/**
 * results findUniqueOrThrow
 */
export type resultsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * Filter, which results to fetch.
   */
  where: Prisma.resultsWhereUniqueInput
}

/**
 * results findFirst
 */
export type resultsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * Filter, which results to fetch.
   */
  where?: Prisma.resultsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of results to fetch.
   */
  orderBy?: Prisma.resultsOrderByWithRelationInput | Prisma.resultsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for results.
   */
  cursor?: Prisma.resultsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` results from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` results.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of results.
   */
  distinct?: Prisma.ResultsScalarFieldEnum | Prisma.ResultsScalarFieldEnum[]
}

/**
 * results findFirstOrThrow
 */
export type resultsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * Filter, which results to fetch.
   */
  where?: Prisma.resultsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of results to fetch.
   */
  orderBy?: Prisma.resultsOrderByWithRelationInput | Prisma.resultsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for results.
   */
  cursor?: Prisma.resultsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` results from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` results.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of results.
   */
  distinct?: Prisma.ResultsScalarFieldEnum | Prisma.ResultsScalarFieldEnum[]
}

/**
 * results findMany
 */
export type resultsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * Filter, which results to fetch.
   */
  where?: Prisma.resultsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of results to fetch.
   */
  orderBy?: Prisma.resultsOrderByWithRelationInput | Prisma.resultsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing results.
   */
  cursor?: Prisma.resultsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` results from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` results.
   */
  skip?: number
  distinct?: Prisma.ResultsScalarFieldEnum | Prisma.ResultsScalarFieldEnum[]
}

/**
 * results create
 */
export type resultsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * The data needed to create a results.
   */
  data: Prisma.XOR<Prisma.resultsCreateInput, Prisma.resultsUncheckedCreateInput>
}

/**
 * results createMany
 */
export type resultsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many results.
   */
  data: Prisma.resultsCreateManyInput | Prisma.resultsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * results createManyAndReturn
 */
export type resultsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * The data used to create many results.
   */
  data: Prisma.resultsCreateManyInput | Prisma.resultsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * results update
 */
export type resultsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * The data needed to update a results.
   */
  data: Prisma.XOR<Prisma.resultsUpdateInput, Prisma.resultsUncheckedUpdateInput>
  /**
   * Choose, which results to update.
   */
  where: Prisma.resultsWhereUniqueInput
}

/**
 * results updateMany
 */
export type resultsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update results.
   */
  data: Prisma.XOR<Prisma.resultsUpdateManyMutationInput, Prisma.resultsUncheckedUpdateManyInput>
  /**
   * Filter which results to update
   */
  where?: Prisma.resultsWhereInput
  /**
   * Limit how many results to update.
   */
  limit?: number
}

/**
 * results updateManyAndReturn
 */
export type resultsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * The data used to update results.
   */
  data: Prisma.XOR<Prisma.resultsUpdateManyMutationInput, Prisma.resultsUncheckedUpdateManyInput>
  /**
   * Filter which results to update
   */
  where?: Prisma.resultsWhereInput
  /**
   * Limit how many results to update.
   */
  limit?: number
}

/**
 * results upsert
 */
export type resultsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * The filter to search for the results to update in case it exists.
   */
  where: Prisma.resultsWhereUniqueInput
  /**
   * In case the results found by the `where` argument doesn't exist, create a new results with this data.
   */
  create: Prisma.XOR<Prisma.resultsCreateInput, Prisma.resultsUncheckedCreateInput>
  /**
   * In case the results was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.resultsUpdateInput, Prisma.resultsUncheckedUpdateInput>
}

/**
 * results delete
 */
export type resultsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
  /**
   * Filter which results to delete.
   */
  where: Prisma.resultsWhereUniqueInput
}

/**
 * results deleteMany
 */
export type resultsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which results to delete
   */
  where?: Prisma.resultsWhereInput
  /**
   * Limit how many results to delete.
   */
  limit?: number
}

/**
 * results without action
 */
export type resultsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the results
   */
  select?: Prisma.resultsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the results
   */
  omit?: Prisma.resultsOmit<ExtArgs> | null
}
