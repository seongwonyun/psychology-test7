
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `prescriptions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model prescriptions
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type prescriptionsModel = runtime.Types.Result.DefaultSelection<Prisma.$prescriptionsPayload>

export type AggregatePrescriptions = {
  _count: PrescriptionsCountAggregateOutputType | null
  _avg: PrescriptionsAvgAggregateOutputType | null
  _sum: PrescriptionsSumAggregateOutputType | null
  _min: PrescriptionsMinAggregateOutputType | null
  _max: PrescriptionsMaxAggregateOutputType | null
}

export type PrescriptionsAvgAggregateOutputType = {
  id: number | null
}

export type PrescriptionsSumAggregateOutputType = {
  id: bigint | null
}

export type PrescriptionsMinAggregateOutputType = {
  id: bigint | null
  code: string | null
  name: string | null
  dear: string | null
  letter: string | null
  concept: string | null
  movie: string | null
  challengeConcept: string | null
  challengeKeyword: string | null
  challengeActivity: string | null
  maintainConcept: string | null
  maintainKeyword: string | null
  maintainActivity: string | null
  reconcileConcept: string | null
  reconcileKeyword: string | null
  reconcileActivity: string | null
}

export type PrescriptionsMaxAggregateOutputType = {
  id: bigint | null
  code: string | null
  name: string | null
  dear: string | null
  letter: string | null
  concept: string | null
  movie: string | null
  challengeConcept: string | null
  challengeKeyword: string | null
  challengeActivity: string | null
  maintainConcept: string | null
  maintainKeyword: string | null
  maintainActivity: string | null
  reconcileConcept: string | null
  reconcileKeyword: string | null
  reconcileActivity: string | null
}

export type PrescriptionsCountAggregateOutputType = {
  id: number
  code: number
  name: number
  dear: number
  letter: number
  concept: number
  movie: number
  challengeConcept: number
  challengeKeyword: number
  challengeActivity: number
  maintainConcept: number
  maintainKeyword: number
  maintainActivity: number
  reconcileConcept: number
  reconcileKeyword: number
  reconcileActivity: number
  _all: number
}


export type PrescriptionsAvgAggregateInputType = {
  id?: true
}

export type PrescriptionsSumAggregateInputType = {
  id?: true
}

export type PrescriptionsMinAggregateInputType = {
  id?: true
  code?: true
  name?: true
  dear?: true
  letter?: true
  concept?: true
  movie?: true
  challengeConcept?: true
  challengeKeyword?: true
  challengeActivity?: true
  maintainConcept?: true
  maintainKeyword?: true
  maintainActivity?: true
  reconcileConcept?: true
  reconcileKeyword?: true
  reconcileActivity?: true
}

export type PrescriptionsMaxAggregateInputType = {
  id?: true
  code?: true
  name?: true
  dear?: true
  letter?: true
  concept?: true
  movie?: true
  challengeConcept?: true
  challengeKeyword?: true
  challengeActivity?: true
  maintainConcept?: true
  maintainKeyword?: true
  maintainActivity?: true
  reconcileConcept?: true
  reconcileKeyword?: true
  reconcileActivity?: true
}

export type PrescriptionsCountAggregateInputType = {
  id?: true
  code?: true
  name?: true
  dear?: true
  letter?: true
  concept?: true
  movie?: true
  challengeConcept?: true
  challengeKeyword?: true
  challengeActivity?: true
  maintainConcept?: true
  maintainKeyword?: true
  maintainActivity?: true
  reconcileConcept?: true
  reconcileKeyword?: true
  reconcileActivity?: true
  _all?: true
}

export type PrescriptionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which prescriptions to aggregate.
   */
  where?: Prisma.prescriptionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of prescriptions to fetch.
   */
  orderBy?: Prisma.prescriptionsOrderByWithRelationInput | Prisma.prescriptionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.prescriptionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` prescriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` prescriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned prescriptions
  **/
  _count?: true | PrescriptionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PrescriptionsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PrescriptionsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PrescriptionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PrescriptionsMaxAggregateInputType
}

export type GetPrescriptionsAggregateType<T extends PrescriptionsAggregateArgs> = {
      [P in keyof T & keyof AggregatePrescriptions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePrescriptions[P]>
    : Prisma.GetScalarType<T[P], AggregatePrescriptions[P]>
}




export type prescriptionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.prescriptionsWhereInput
  orderBy?: Prisma.prescriptionsOrderByWithAggregationInput | Prisma.prescriptionsOrderByWithAggregationInput[]
  by: Prisma.PrescriptionsScalarFieldEnum[] | Prisma.PrescriptionsScalarFieldEnum
  having?: Prisma.prescriptionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PrescriptionsCountAggregateInputType | true
  _avg?: PrescriptionsAvgAggregateInputType
  _sum?: PrescriptionsSumAggregateInputType
  _min?: PrescriptionsMinAggregateInputType
  _max?: PrescriptionsMaxAggregateInputType
}

export type PrescriptionsGroupByOutputType = {
  id: bigint | null
  code: string
  name: string | null
  dear: string | null
  letter: string | null
  concept: string | null
  movie: string | null
  challengeConcept: string | null
  challengeKeyword: string | null
  challengeActivity: string | null
  maintainConcept: string | null
  maintainKeyword: string | null
  maintainActivity: string | null
  reconcileConcept: string | null
  reconcileKeyword: string | null
  reconcileActivity: string | null
  _count: PrescriptionsCountAggregateOutputType | null
  _avg: PrescriptionsAvgAggregateOutputType | null
  _sum: PrescriptionsSumAggregateOutputType | null
  _min: PrescriptionsMinAggregateOutputType | null
  _max: PrescriptionsMaxAggregateOutputType | null
}

type GetPrescriptionsGroupByPayload<T extends prescriptionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PrescriptionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PrescriptionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PrescriptionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PrescriptionsGroupByOutputType[P]>
      }
    >
  >



export type prescriptionsWhereInput = {
  AND?: Prisma.prescriptionsWhereInput | Prisma.prescriptionsWhereInput[]
  OR?: Prisma.prescriptionsWhereInput[]
  NOT?: Prisma.prescriptionsWhereInput | Prisma.prescriptionsWhereInput[]
  id?: Prisma.BigIntNullableFilter<"prescriptions"> | bigint | number | null
  code?: Prisma.StringFilter<"prescriptions"> | string
  name?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  dear?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  letter?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  concept?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  movie?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  challengeConcept?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  challengeKeyword?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  challengeActivity?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  maintainConcept?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  maintainKeyword?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  maintainActivity?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  reconcileConcept?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  reconcileKeyword?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  reconcileActivity?: Prisma.StringNullableFilter<"prescriptions"> | string | null
}

export type prescriptionsOrderByWithRelationInput = {
  id?: Prisma.SortOrderInput | Prisma.SortOrder
  code?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  dear?: Prisma.SortOrderInput | Prisma.SortOrder
  letter?: Prisma.SortOrderInput | Prisma.SortOrder
  concept?: Prisma.SortOrderInput | Prisma.SortOrder
  movie?: Prisma.SortOrderInput | Prisma.SortOrder
  challengeConcept?: Prisma.SortOrderInput | Prisma.SortOrder
  challengeKeyword?: Prisma.SortOrderInput | Prisma.SortOrder
  challengeActivity?: Prisma.SortOrderInput | Prisma.SortOrder
  maintainConcept?: Prisma.SortOrderInput | Prisma.SortOrder
  maintainKeyword?: Prisma.SortOrderInput | Prisma.SortOrder
  maintainActivity?: Prisma.SortOrderInput | Prisma.SortOrder
  reconcileConcept?: Prisma.SortOrderInput | Prisma.SortOrder
  reconcileKeyword?: Prisma.SortOrderInput | Prisma.SortOrder
  reconcileActivity?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type prescriptionsWhereUniqueInput = Prisma.AtLeast<{
  code?: string
  AND?: Prisma.prescriptionsWhereInput | Prisma.prescriptionsWhereInput[]
  OR?: Prisma.prescriptionsWhereInput[]
  NOT?: Prisma.prescriptionsWhereInput | Prisma.prescriptionsWhereInput[]
  id?: Prisma.BigIntNullableFilter<"prescriptions"> | bigint | number | null
  name?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  dear?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  letter?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  concept?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  movie?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  challengeConcept?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  challengeKeyword?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  challengeActivity?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  maintainConcept?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  maintainKeyword?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  maintainActivity?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  reconcileConcept?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  reconcileKeyword?: Prisma.StringNullableFilter<"prescriptions"> | string | null
  reconcileActivity?: Prisma.StringNullableFilter<"prescriptions"> | string | null
}, "code">

export type prescriptionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrderInput | Prisma.SortOrder
  code?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  dear?: Prisma.SortOrderInput | Prisma.SortOrder
  letter?: Prisma.SortOrderInput | Prisma.SortOrder
  concept?: Prisma.SortOrderInput | Prisma.SortOrder
  movie?: Prisma.SortOrderInput | Prisma.SortOrder
  challengeConcept?: Prisma.SortOrderInput | Prisma.SortOrder
  challengeKeyword?: Prisma.SortOrderInput | Prisma.SortOrder
  challengeActivity?: Prisma.SortOrderInput | Prisma.SortOrder
  maintainConcept?: Prisma.SortOrderInput | Prisma.SortOrder
  maintainKeyword?: Prisma.SortOrderInput | Prisma.SortOrder
  maintainActivity?: Prisma.SortOrderInput | Prisma.SortOrder
  reconcileConcept?: Prisma.SortOrderInput | Prisma.SortOrder
  reconcileKeyword?: Prisma.SortOrderInput | Prisma.SortOrder
  reconcileActivity?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.prescriptionsCountOrderByAggregateInput
  _avg?: Prisma.prescriptionsAvgOrderByAggregateInput
  _max?: Prisma.prescriptionsMaxOrderByAggregateInput
  _min?: Prisma.prescriptionsMinOrderByAggregateInput
  _sum?: Prisma.prescriptionsSumOrderByAggregateInput
}

export type prescriptionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.prescriptionsScalarWhereWithAggregatesInput | Prisma.prescriptionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.prescriptionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.prescriptionsScalarWhereWithAggregatesInput | Prisma.prescriptionsScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntNullableWithAggregatesFilter<"prescriptions"> | bigint | number | null
  code?: Prisma.StringWithAggregatesFilter<"prescriptions"> | string
  name?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  dear?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  letter?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  concept?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  movie?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  challengeConcept?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  challengeKeyword?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  challengeActivity?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  maintainConcept?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  maintainKeyword?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  maintainActivity?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  reconcileConcept?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  reconcileKeyword?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
  reconcileActivity?: Prisma.StringNullableWithAggregatesFilter<"prescriptions"> | string | null
}

export type prescriptionsCreateInput = {
  id?: bigint | number | null
  code: string
  name?: string | null
  dear?: string | null
  letter?: string | null
  concept?: string | null
  movie?: string | null
  challengeConcept?: string | null
  challengeKeyword?: string | null
  challengeActivity?: string | null
  maintainConcept?: string | null
  maintainKeyword?: string | null
  maintainActivity?: string | null
  reconcileConcept?: string | null
  reconcileKeyword?: string | null
  reconcileActivity?: string | null
}

export type prescriptionsUncheckedCreateInput = {
  id?: bigint | number | null
  code: string
  name?: string | null
  dear?: string | null
  letter?: string | null
  concept?: string | null
  movie?: string | null
  challengeConcept?: string | null
  challengeKeyword?: string | null
  challengeActivity?: string | null
  maintainConcept?: string | null
  maintainKeyword?: string | null
  maintainActivity?: string | null
  reconcileConcept?: string | null
  reconcileKeyword?: string | null
  reconcileActivity?: string | null
}

export type prescriptionsUpdateInput = {
  id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  code?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dear?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  letter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  concept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  movie?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type prescriptionsUncheckedUpdateInput = {
  id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  code?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dear?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  letter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  concept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  movie?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type prescriptionsCreateManyInput = {
  id?: bigint | number | null
  code: string
  name?: string | null
  dear?: string | null
  letter?: string | null
  concept?: string | null
  movie?: string | null
  challengeConcept?: string | null
  challengeKeyword?: string | null
  challengeActivity?: string | null
  maintainConcept?: string | null
  maintainKeyword?: string | null
  maintainActivity?: string | null
  reconcileConcept?: string | null
  reconcileKeyword?: string | null
  reconcileActivity?: string | null
}

export type prescriptionsUpdateManyMutationInput = {
  id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  code?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dear?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  letter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  concept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  movie?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type prescriptionsUncheckedUpdateManyInput = {
  id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  code?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dear?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  letter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  concept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  movie?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  challengeActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintainActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileConcept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileKeyword?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reconcileActivity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type prescriptionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dear?: Prisma.SortOrder
  letter?: Prisma.SortOrder
  concept?: Prisma.SortOrder
  movie?: Prisma.SortOrder
  challengeConcept?: Prisma.SortOrder
  challengeKeyword?: Prisma.SortOrder
  challengeActivity?: Prisma.SortOrder
  maintainConcept?: Prisma.SortOrder
  maintainKeyword?: Prisma.SortOrder
  maintainActivity?: Prisma.SortOrder
  reconcileConcept?: Prisma.SortOrder
  reconcileKeyword?: Prisma.SortOrder
  reconcileActivity?: Prisma.SortOrder
}

export type prescriptionsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type prescriptionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dear?: Prisma.SortOrder
  letter?: Prisma.SortOrder
  concept?: Prisma.SortOrder
  movie?: Prisma.SortOrder
  challengeConcept?: Prisma.SortOrder
  challengeKeyword?: Prisma.SortOrder
  challengeActivity?: Prisma.SortOrder
  maintainConcept?: Prisma.SortOrder
  maintainKeyword?: Prisma.SortOrder
  maintainActivity?: Prisma.SortOrder
  reconcileConcept?: Prisma.SortOrder
  reconcileKeyword?: Prisma.SortOrder
  reconcileActivity?: Prisma.SortOrder
}

export type prescriptionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dear?: Prisma.SortOrder
  letter?: Prisma.SortOrder
  concept?: Prisma.SortOrder
  movie?: Prisma.SortOrder
  challengeConcept?: Prisma.SortOrder
  challengeKeyword?: Prisma.SortOrder
  challengeActivity?: Prisma.SortOrder
  maintainConcept?: Prisma.SortOrder
  maintainKeyword?: Prisma.SortOrder
  maintainActivity?: Prisma.SortOrder
  reconcileConcept?: Prisma.SortOrder
  reconcileKeyword?: Prisma.SortOrder
  reconcileActivity?: Prisma.SortOrder
}

export type prescriptionsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type NullableBigIntFieldUpdateOperationsInput = {
  set?: bigint | number | null
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}



export type prescriptionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  name?: boolean
  dear?: boolean
  letter?: boolean
  concept?: boolean
  movie?: boolean
  challengeConcept?: boolean
  challengeKeyword?: boolean
  challengeActivity?: boolean
  maintainConcept?: boolean
  maintainKeyword?: boolean
  maintainActivity?: boolean
  reconcileConcept?: boolean
  reconcileKeyword?: boolean
  reconcileActivity?: boolean
}, ExtArgs["result"]["prescriptions"]>

export type prescriptionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  name?: boolean
  dear?: boolean
  letter?: boolean
  concept?: boolean
  movie?: boolean
  challengeConcept?: boolean
  challengeKeyword?: boolean
  challengeActivity?: boolean
  maintainConcept?: boolean
  maintainKeyword?: boolean
  maintainActivity?: boolean
  reconcileConcept?: boolean
  reconcileKeyword?: boolean
  reconcileActivity?: boolean
}, ExtArgs["result"]["prescriptions"]>

export type prescriptionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  name?: boolean
  dear?: boolean
  letter?: boolean
  concept?: boolean
  movie?: boolean
  challengeConcept?: boolean
  challengeKeyword?: boolean
  challengeActivity?: boolean
  maintainConcept?: boolean
  maintainKeyword?: boolean
  maintainActivity?: boolean
  reconcileConcept?: boolean
  reconcileKeyword?: boolean
  reconcileActivity?: boolean
}, ExtArgs["result"]["prescriptions"]>

export type prescriptionsSelectScalar = {
  id?: boolean
  code?: boolean
  name?: boolean
  dear?: boolean
  letter?: boolean
  concept?: boolean
  movie?: boolean
  challengeConcept?: boolean
  challengeKeyword?: boolean
  challengeActivity?: boolean
  maintainConcept?: boolean
  maintainKeyword?: boolean
  maintainActivity?: boolean
  reconcileConcept?: boolean
  reconcileKeyword?: boolean
  reconcileActivity?: boolean
}

export type prescriptionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "code" | "name" | "dear" | "letter" | "concept" | "movie" | "challengeConcept" | "challengeKeyword" | "challengeActivity" | "maintainConcept" | "maintainKeyword" | "maintainActivity" | "reconcileConcept" | "reconcileKeyword" | "reconcileActivity", ExtArgs["result"]["prescriptions"]>

export type $prescriptionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "prescriptions"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint | null
    code: string
    name: string | null
    dear: string | null
    letter: string | null
    concept: string | null
    movie: string | null
    challengeConcept: string | null
    challengeKeyword: string | null
    challengeActivity: string | null
    maintainConcept: string | null
    maintainKeyword: string | null
    maintainActivity: string | null
    reconcileConcept: string | null
    reconcileKeyword: string | null
    reconcileActivity: string | null
  }, ExtArgs["result"]["prescriptions"]>
  composites: {}
}

export type prescriptionsGetPayload<S extends boolean | null | undefined | prescriptionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload, S>

export type prescriptionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<prescriptionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PrescriptionsCountAggregateInputType | true
  }

export interface prescriptionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['prescriptions'], meta: { name: 'prescriptions' } }
  /**
   * Find zero or one Prescriptions that matches the filter.
   * @param {prescriptionsFindUniqueArgs} args - Arguments to find a Prescriptions
   * @example
   * // Get one Prescriptions
   * const prescriptions = await prisma.prescriptions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends prescriptionsFindUniqueArgs>(args: Prisma.SelectSubset<T, prescriptionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__prescriptionsClient<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Prescriptions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {prescriptionsFindUniqueOrThrowArgs} args - Arguments to find a Prescriptions
   * @example
   * // Get one Prescriptions
   * const prescriptions = await prisma.prescriptions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends prescriptionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, prescriptionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__prescriptionsClient<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Prescriptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {prescriptionsFindFirstArgs} args - Arguments to find a Prescriptions
   * @example
   * // Get one Prescriptions
   * const prescriptions = await prisma.prescriptions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends prescriptionsFindFirstArgs>(args?: Prisma.SelectSubset<T, prescriptionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__prescriptionsClient<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Prescriptions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {prescriptionsFindFirstOrThrowArgs} args - Arguments to find a Prescriptions
   * @example
   * // Get one Prescriptions
   * const prescriptions = await prisma.prescriptions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends prescriptionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, prescriptionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__prescriptionsClient<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Prescriptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {prescriptionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Prescriptions
   * const prescriptions = await prisma.prescriptions.findMany()
   * 
   * // Get first 10 Prescriptions
   * const prescriptions = await prisma.prescriptions.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const prescriptionsWithIdOnly = await prisma.prescriptions.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends prescriptionsFindManyArgs>(args?: Prisma.SelectSubset<T, prescriptionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Prescriptions.
   * @param {prescriptionsCreateArgs} args - Arguments to create a Prescriptions.
   * @example
   * // Create one Prescriptions
   * const Prescriptions = await prisma.prescriptions.create({
   *   data: {
   *     // ... data to create a Prescriptions
   *   }
   * })
   * 
   */
  create<T extends prescriptionsCreateArgs>(args: Prisma.SelectSubset<T, prescriptionsCreateArgs<ExtArgs>>): Prisma.Prisma__prescriptionsClient<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Prescriptions.
   * @param {prescriptionsCreateManyArgs} args - Arguments to create many Prescriptions.
   * @example
   * // Create many Prescriptions
   * const prescriptions = await prisma.prescriptions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends prescriptionsCreateManyArgs>(args?: Prisma.SelectSubset<T, prescriptionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Prescriptions and returns the data saved in the database.
   * @param {prescriptionsCreateManyAndReturnArgs} args - Arguments to create many Prescriptions.
   * @example
   * // Create many Prescriptions
   * const prescriptions = await prisma.prescriptions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Prescriptions and only return the `id`
   * const prescriptionsWithIdOnly = await prisma.prescriptions.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends prescriptionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, prescriptionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Prescriptions.
   * @param {prescriptionsDeleteArgs} args - Arguments to delete one Prescriptions.
   * @example
   * // Delete one Prescriptions
   * const Prescriptions = await prisma.prescriptions.delete({
   *   where: {
   *     // ... filter to delete one Prescriptions
   *   }
   * })
   * 
   */
  delete<T extends prescriptionsDeleteArgs>(args: Prisma.SelectSubset<T, prescriptionsDeleteArgs<ExtArgs>>): Prisma.Prisma__prescriptionsClient<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Prescriptions.
   * @param {prescriptionsUpdateArgs} args - Arguments to update one Prescriptions.
   * @example
   * // Update one Prescriptions
   * const prescriptions = await prisma.prescriptions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends prescriptionsUpdateArgs>(args: Prisma.SelectSubset<T, prescriptionsUpdateArgs<ExtArgs>>): Prisma.Prisma__prescriptionsClient<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Prescriptions.
   * @param {prescriptionsDeleteManyArgs} args - Arguments to filter Prescriptions to delete.
   * @example
   * // Delete a few Prescriptions
   * const { count } = await prisma.prescriptions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends prescriptionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, prescriptionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Prescriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {prescriptionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Prescriptions
   * const prescriptions = await prisma.prescriptions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends prescriptionsUpdateManyArgs>(args: Prisma.SelectSubset<T, prescriptionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Prescriptions and returns the data updated in the database.
   * @param {prescriptionsUpdateManyAndReturnArgs} args - Arguments to update many Prescriptions.
   * @example
   * // Update many Prescriptions
   * const prescriptions = await prisma.prescriptions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Prescriptions and only return the `id`
   * const prescriptionsWithIdOnly = await prisma.prescriptions.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends prescriptionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, prescriptionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Prescriptions.
   * @param {prescriptionsUpsertArgs} args - Arguments to update or create a Prescriptions.
   * @example
   * // Update or create a Prescriptions
   * const prescriptions = await prisma.prescriptions.upsert({
   *   create: {
   *     // ... data to create a Prescriptions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Prescriptions we want to update
   *   }
   * })
   */
  upsert<T extends prescriptionsUpsertArgs>(args: Prisma.SelectSubset<T, prescriptionsUpsertArgs<ExtArgs>>): Prisma.Prisma__prescriptionsClient<runtime.Types.Result.GetResult<Prisma.$prescriptionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Prescriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {prescriptionsCountArgs} args - Arguments to filter Prescriptions to count.
   * @example
   * // Count the number of Prescriptions
   * const count = await prisma.prescriptions.count({
   *   where: {
   *     // ... the filter for the Prescriptions we want to count
   *   }
   * })
  **/
  count<T extends prescriptionsCountArgs>(
    args?: Prisma.Subset<T, prescriptionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PrescriptionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Prescriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PrescriptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PrescriptionsAggregateArgs>(args: Prisma.Subset<T, PrescriptionsAggregateArgs>): Prisma.PrismaPromise<GetPrescriptionsAggregateType<T>>

  /**
   * Group by Prescriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {prescriptionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends prescriptionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: prescriptionsGroupByArgs['orderBy'] }
      : { orderBy?: prescriptionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, prescriptionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrescriptionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the prescriptions model
 */
readonly fields: prescriptionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for prescriptions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__prescriptionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the prescriptions model
 */
export interface prescriptionsFieldRefs {
  readonly id: Prisma.FieldRef<"prescriptions", 'BigInt'>
  readonly code: Prisma.FieldRef<"prescriptions", 'String'>
  readonly name: Prisma.FieldRef<"prescriptions", 'String'>
  readonly dear: Prisma.FieldRef<"prescriptions", 'String'>
  readonly letter: Prisma.FieldRef<"prescriptions", 'String'>
  readonly concept: Prisma.FieldRef<"prescriptions", 'String'>
  readonly movie: Prisma.FieldRef<"prescriptions", 'String'>
  readonly challengeConcept: Prisma.FieldRef<"prescriptions", 'String'>
  readonly challengeKeyword: Prisma.FieldRef<"prescriptions", 'String'>
  readonly challengeActivity: Prisma.FieldRef<"prescriptions", 'String'>
  readonly maintainConcept: Prisma.FieldRef<"prescriptions", 'String'>
  readonly maintainKeyword: Prisma.FieldRef<"prescriptions", 'String'>
  readonly maintainActivity: Prisma.FieldRef<"prescriptions", 'String'>
  readonly reconcileConcept: Prisma.FieldRef<"prescriptions", 'String'>
  readonly reconcileKeyword: Prisma.FieldRef<"prescriptions", 'String'>
  readonly reconcileActivity: Prisma.FieldRef<"prescriptions", 'String'>
}
    

// Custom InputTypes
/**
 * prescriptions findUnique
 */
export type prescriptionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * Filter, which prescriptions to fetch.
   */
  where: Prisma.prescriptionsWhereUniqueInput
}

/**
 * prescriptions findUniqueOrThrow
 */
export type prescriptionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * Filter, which prescriptions to fetch.
   */
  where: Prisma.prescriptionsWhereUniqueInput
}

/**
 * prescriptions findFirst
 */
export type prescriptionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * Filter, which prescriptions to fetch.
   */
  where?: Prisma.prescriptionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of prescriptions to fetch.
   */
  orderBy?: Prisma.prescriptionsOrderByWithRelationInput | Prisma.prescriptionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for prescriptions.
   */
  cursor?: Prisma.prescriptionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` prescriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` prescriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of prescriptions.
   */
  distinct?: Prisma.PrescriptionsScalarFieldEnum | Prisma.PrescriptionsScalarFieldEnum[]
}

/**
 * prescriptions findFirstOrThrow
 */
export type prescriptionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * Filter, which prescriptions to fetch.
   */
  where?: Prisma.prescriptionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of prescriptions to fetch.
   */
  orderBy?: Prisma.prescriptionsOrderByWithRelationInput | Prisma.prescriptionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for prescriptions.
   */
  cursor?: Prisma.prescriptionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` prescriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` prescriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of prescriptions.
   */
  distinct?: Prisma.PrescriptionsScalarFieldEnum | Prisma.PrescriptionsScalarFieldEnum[]
}

/**
 * prescriptions findMany
 */
export type prescriptionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * Filter, which prescriptions to fetch.
   */
  where?: Prisma.prescriptionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of prescriptions to fetch.
   */
  orderBy?: Prisma.prescriptionsOrderByWithRelationInput | Prisma.prescriptionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing prescriptions.
   */
  cursor?: Prisma.prescriptionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` prescriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` prescriptions.
   */
  skip?: number
  distinct?: Prisma.PrescriptionsScalarFieldEnum | Prisma.PrescriptionsScalarFieldEnum[]
}

/**
 * prescriptions create
 */
export type prescriptionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * The data needed to create a prescriptions.
   */
  data: Prisma.XOR<Prisma.prescriptionsCreateInput, Prisma.prescriptionsUncheckedCreateInput>
}

/**
 * prescriptions createMany
 */
export type prescriptionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many prescriptions.
   */
  data: Prisma.prescriptionsCreateManyInput | Prisma.prescriptionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * prescriptions createManyAndReturn
 */
export type prescriptionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * The data used to create many prescriptions.
   */
  data: Prisma.prescriptionsCreateManyInput | Prisma.prescriptionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * prescriptions update
 */
export type prescriptionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * The data needed to update a prescriptions.
   */
  data: Prisma.XOR<Prisma.prescriptionsUpdateInput, Prisma.prescriptionsUncheckedUpdateInput>
  /**
   * Choose, which prescriptions to update.
   */
  where: Prisma.prescriptionsWhereUniqueInput
}

/**
 * prescriptions updateMany
 */
export type prescriptionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update prescriptions.
   */
  data: Prisma.XOR<Prisma.prescriptionsUpdateManyMutationInput, Prisma.prescriptionsUncheckedUpdateManyInput>
  /**
   * Filter which prescriptions to update
   */
  where?: Prisma.prescriptionsWhereInput
  /**
   * Limit how many prescriptions to update.
   */
  limit?: number
}

/**
 * prescriptions updateManyAndReturn
 */
export type prescriptionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * The data used to update prescriptions.
   */
  data: Prisma.XOR<Prisma.prescriptionsUpdateManyMutationInput, Prisma.prescriptionsUncheckedUpdateManyInput>
  /**
   * Filter which prescriptions to update
   */
  where?: Prisma.prescriptionsWhereInput
  /**
   * Limit how many prescriptions to update.
   */
  limit?: number
}

/**
 * prescriptions upsert
 */
export type prescriptionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * The filter to search for the prescriptions to update in case it exists.
   */
  where: Prisma.prescriptionsWhereUniqueInput
  /**
   * In case the prescriptions found by the `where` argument doesn't exist, create a new prescriptions with this data.
   */
  create: Prisma.XOR<Prisma.prescriptionsCreateInput, Prisma.prescriptionsUncheckedCreateInput>
  /**
   * In case the prescriptions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.prescriptionsUpdateInput, Prisma.prescriptionsUncheckedUpdateInput>
}

/**
 * prescriptions delete
 */
export type prescriptionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
  /**
   * Filter which prescriptions to delete.
   */
  where: Prisma.prescriptionsWhereUniqueInput
}

/**
 * prescriptions deleteMany
 */
export type prescriptionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which prescriptions to delete
   */
  where?: Prisma.prescriptionsWhereInput
  /**
   * Limit how many prescriptions to delete.
   */
  limit?: number
}

/**
 * prescriptions without action
 */
export type prescriptionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the prescriptions
   */
  select?: Prisma.prescriptionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the prescriptions
   */
  omit?: Prisma.prescriptionsOmit<ExtArgs> | null
}
